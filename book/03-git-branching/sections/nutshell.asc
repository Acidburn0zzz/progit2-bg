[[_git_branches_overview]]
=== Накратко за разклоненията

За да разберем как в действителност Git реализира разклоненията, трябва да се върнем стъпка назад и да си припомним как Git съхранява совите данни.

Както може би помните от <<_getting_started>>, Git не съхранява информацията си като серии от промени или разлики, а вместо това пази серии от моментното състояние на проекта - snapshots.

Когато правите къмит, Git съхранява един commit обект, който съдържа указател към snapshot-а на индексираното съдържание (това, което е в индексната област).
Този обект също така съдържа името и имейла на автора, къмит съобщението и също так - указатели към къмита или къмитите, които са правени директно преди текущия къмит (тоест, неговите родител/родители): първоначалният къмит няма родители, нормалният къмит има един родител, а къмитът създаден в резултат от сливане на няколко клона има множество родители.

За да илюстрираме това, нека допуснем, че имате директория с три файла и сте ги индексирали и къмитнали.
Процесът по индексирането на файловете (staging) изчислява чексума за всеки от файловете (това е SHA-1 хеш стрингът за който говорихме по-рано в  <<_getting_started>>), записва версията на всеки файл в хранилището (Git третира файловете като blob-обекти) и добавя чексумите в индексната област (staging area):

[source,console]
----
$ git add README test.rb LICENSE
$ git commit -m 'The initial commit of my project'
----

След като изпълните `git commit`, Git изчислява чексума за всяка поддиректория (в този случай само основната директория на проекта) и съхранява тези дървовидни обекти в Git хранилището.
След това Git създава commit-обект, който съдържа метаданните и указател към root-дървото на проекта, така че да може да пресъздаде snapshot-а (тоест йерархията от файлове и директории) по-късно, когато е необходимо.(((git commands, commit)))

Вашето Git хранилище сега съдържа 5 обекта: по един blob за всеки от трите файла, едно дърво описващо съдържанието на директорията и указващо кой файл под формата на кой blob се съхранява, и един къмит с указател към това основно дърво и всички метаданни за къмита.

.Един къмит и неговото дърво
image::images/commit-and-tree.png[Един къмит и неговото дърво.]

Ако направите някакви промени и къмитнете отново, следващият къмит ще съхранява указател към къмитът направен веднага преди него.

.Къмити и родителски къмити
image::images/commits-and-parents.png[Къмити и родителски къмити.]

Разклонението код (branch) в Git е просто олекотен, променлив указател към един от тези къмити.
Името на разклонението по подразбиране за Git е `master`.
Когато започнете да правите къмити, вие разполагате с `master` branch, който сочи към последния къмит, който сте направили.
Всеки път, когато къмитвате, той автоматично се премества и сочи към последния къмит.

[NOTE]
====
``master'' клонът в Git не бива да се разглежда като специален такъв.(((master)))
Той е подобен на всички останали клонове.
Единствената причина почти всяко хранилище да има master клон е, че командата `git init` го създава по подразбиране и повечето хора не си правят труда да му сменят името.
====

.branch и неговата commit история
image::images/branch-and-history.png[branch и неговата commit история.]

[[_create_new_branch]]
==== Създаване на ново разклонение

(((branches, creating)))
(Тук под клон, разклонение и branch ще имаме предвид едно и също нещо.)
Какво се случва, когато създадете нов клон от кода?
Git просто създава нов указател за вас, който да може да се премества.
Да кажем, че създавате клон с име testing.
Това се прави с командата `git branch`:(((git commands, branch)))

[source,console]
----
$ git branch testing
----

Това създава нов указател към същия къмит, на който сте в момента.

.Два клона сочещи към една и съща серия къмити
image::images/two-branches.png[Два клона сочещи към една и съща серия къмити.]

Как Git знае в кой клон сте в даден момент?
Системата си пази специален указател, който се нарича `HEAD`.
Отбележете, че това е съвсем различно от `HEAD` концепциите в други VCS от рода на Subversion или CVS.
В Git, това е указател към текущия локален клон от хранилището ви.
В този случай, вие още сте в `master` клона.
Това е така, защото `git branch` командата само _създаде_ новия клон, но не превключи към него.

.HEAD указател сочещ към текущия branch
image::images/head-to-master.png[HEAD указател сочещ към текущия branch.]

Можете лесно да видите това изпълнявайки командата `git log --decorate`, която отпечатва накъде сочат указателите на разклоненията.

[source,console]
----
$ git log --oneline --decorate
f30ab (HEAD -> master, testing) add feature #32 - ability to add new formats to the central interface
34ac2 Fixed bug #1328 - stack overflow under certain conditions
98ca9 The initial commit of my project
----

Виждате ``master'' и ``testing'' клоновете веднага до `f30ab`-къмита.

[[_switching_branches]]
==== Превключване на разклонения

(((branches, switching)))
За да превключите към съществуващ клон, изпълнете командата `git checkout`.(((git commands, checkout)))
Нека превключим към `testing` клона:

[source,console]
----
$ git checkout testing
----

Това премества `HEAD` указателя и сега той сочи към `testing` клона.

.HEAD сочи към текущия клон
image::images/head-to-testing.png[HEAD сочи към текущия клон.]

Какво означава това?
Нека направим още един къмит:

[source,console]
----
$ vim test.rb
$ git commit -a -m 'made a change'
----

.HEAD клонът се премества напред при направен къмит
image::images/advance-testing.png[HEAD клонът се премества напред при направен къмит.]

Това е интересно, защото сега вашият `testing` клон се премести напред, но `master` клонът все още сочи към къмита, в който бяхте когато изпълнихте `git checkout` за да превключите разклоненията.
Нека се върнем отново на `master` клона:

[source,console]
----
$ git checkout master
----

.HEAD се премества когато превключвате
image::images/checkout-master.png[HEAD се премества когато превключвате.]

Тази команда направи две неща.
Тя премести HEAD указателя обратно към точката на `master` клона - и също така върна обратно статуса на всички файлове в работната ви директория така че те сега съдържат това, което са съдържали в момента на последния къмит в `master` клона.
Това също означава, че промените които предстои да правите занапред от тази точка на проекта, ще произлизат от по-стара негова версия.
Практически - връщането в `master` клона заличи всички промени от `testing` клона в работната директория и сега можете да тръгнете в различна посока.

[NOTE]
.Switching branches changes files in your working directory
====
It's important to note that when you switch branches in Git, files in your working directory will change.
If you switch to an older branch, your working directory will be reverted to look like it did the last time you committed on that branch.
If Git cannot do it cleanly, it will not let you switch at all.
====

Let's make a few changes and commit again:

[source,console]
----
$ vim test.rb
$ git commit -a -m 'made other changes'
----

Now your project history has diverged (see <<divergent_history>>).
You created and switched to a branch, did some work on it, and then switched back to your main branch and did other work.
Both of those changes are isolated in separate branches: you can switch back and forth between the branches and merge them together when you're ready.
And you did all that with simple `branch`, `checkout`, and `commit` commands.

[[divergent_history]]
.Divergent history
image::images/advance-master.png[Divergent history.]

You can also see this easily with the `git log` command.
If you run `git log --oneline --decorate --graph --all` it will print out the history of your commits, showing where your branch pointers are and how your history has diverged.

[source,console]
----
$ git log --oneline --decorate --graph --all
* c2b9e (HEAD, master) made other changes
| * 87ab2 (testing) made a change
|/
* f30ab add feature #32 - ability to add new formats to the
* 34ac2 fixed bug #1328 - stack overflow under certain conditions
* 98ca9 initial commit of my project
----

Because a branch in Git is actually a simple file that contains the 40 character SHA-1 checksum of the commit it points to, branches are cheap to create and destroy.
Creating a new branch is as quick and simple as writing 41 bytes to a file (40 characters and a newline).

This is in sharp contrast to the way most older VCS tools branch, which involves copying all of the project's files into a second directory.
This can take several seconds or even minutes, depending on the size of the project, whereas in Git the process is always instantaneous.
Also, because we're recording the parents when we commit, finding a proper merge base for merging is automatically done for us and is generally very easy to do.
These features help encourage developers to create and use branches often.

Let's see why you should do so.
