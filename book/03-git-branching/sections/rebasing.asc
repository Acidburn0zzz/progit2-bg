[[_rebasing]]
=== Пребазиране на клонове

(((rebasing)))
В Git съществуват два основни начина за интегриране на промени от един клон код в друг: сливане (`merge`) и пребазиране (`rebase`).
В тази секция ще научите какво е пребазирането, как да го правите, защо е мощен инструмент и кои са случаите, в които не бихте искали да го използвате.

==== Основно пребазиране

Ако се върнете назад до по-ранния пример в <<_basic_merging>>, можете да си припомните, че работата ви се разклонява и вие правихте къмити в два ралзични клона.

.Проста история на разклоняването
image::images/basic-rebase-1.png[Проста история на разклоняването.]

Най-лесният начин за интегрирането на клоновете, както вече разгледахме, беше командата `merge`.
Тя изпълнява трипосочно сливане между най-новите snapshot-и от клоновете (`C3` и `C4`) и най-близкия им общ предшественик (`C2`) създавайки нов snapshot (и къмит).

.Сливане за интегриране на разклонена работна история
image::images/basic-rebase-2.png[Сливане за интегриране на разклонена работна история.]

Обаче, съществува и друг начин да направите това: можете да вземете patch на промените, които са въведени с `C4` и да ги приложите върху `C3`. 
В Git това се нарича пребазиране, _rebasing_.
С командата `rebase`, вие вземате всички промени къмитнати в един клон и ги пускате в друг такъв.(((git commands, rebase)))

В този пример, ще направите следното:

[source,console]
----
$ git checkout experiment
$ git rebase master
First, rewinding head to replay your work on top of it...
Applying: added staged command
----

Това става, като се намери най-близкия общ предшестващ къмит на двата клона (този върху, който сте в момента и този, който ще пребазирате), вземат се разликите въведени от всеки къмит на клона, върху който сте, разликите се записват във временни файлове, текущият клон се ресетва към същия къмит, в който е клона, който ще се пребазира, и накрая се прилага всяка промяна поред.

.Пребазиране на промяната от `C4` в `C3`
image::images/basic-rebase-3.png[Пребазиране на промяната от `C4` в `C3`.]

В този момент, можете да се върнете към `master` клона и да направите fast-forward сливане.

[source,console]
----
$ git checkout master
$ git merge experiment
----

.Fast-forwarding на клона master
image::images/basic-rebase-4.png[Fast-forwarding на клона master.]

Сега snapshot-ът, към който сочи `C4'` е точно същият като този, към който сочеше `C5` в предния пример, където ползвахме сливане вместо пребазиране.
Няма разлика в крайния резултат от интеграцията, но пребазирането прави историята по-чиста.
Ако изследвате лога на един пребазиран клон код, той ще прилича на линейна история, цялата работа изглежда като случила се на серии, дори когато в действителност е била паралелна.

Често ще правите това за да се уверите, че вашите къмити се прилагат безпроблемно върху отдалечен клон - вероятно проект, към който се опитвате да допринесете, но който не поддържате като автор.
В този случай, вие вършите своята дейснот в собствен клон и след това пребазирате работата си върху `origin/master`, когато сте готови да изпратите своите поправки в основния проект.
По този начин, поддръжащият проекта разработчик не трябва да върши никаква работа по интеграцията на промените ви - просто ще направи fast-forward.

Отбележете отново, че snapshot-ът, към който сочи финалния получил се къмит (бил той последния от пребазираните къмити за rebase или пък новосъздадения в резултат от merge) е един и същи и в двата случая - разликата е само в историята.
Пребазирането прилага промените от една линия на разработка в друга по реда, в който те са били направени, докато сливането взема двата края на два клона и ги слива в едно.

==== Други интересни пребазирания

Едно пребазиране може да бъде приложено и върху друг освен върху целевия му клон.
Например, вижте фигурата <<rbdiag_e>>.
Създали сте един topic клон (`server`) за да добавите някаква сървърна функционалност към проекта си и сте направили къмит.
След това, ползвайки този клон за отправна точка, сте създали нов такъв (`client`) за да направите някакви промени по клиентската част и сте къмитнали няколко пъти.
Накрая, върнали сте се обратно към сървърния клон и сте направили още няколко къмита.

[[rbdiag_e]]
.История с topic клон произлизащ от друг topic клон
image::images/interesting-rebase-1.png[История с topic клон произлизащ от друг topic клон.]

Да кажем, че решавате да слеете клиентските промени в `master` клона за публикуване, но желаете да си запазите server-side промените за допълнително тестване.
Можете да вземете промените в клиентската част, които не присъстват на сървъра (`C8` and `C9`) и да ги приложите върху `master` клона чрез параметъра `--onto` на командата `git rebase`:

[source,console]
----
$ git rebase --onto master server client
----

Това звучи така, ``Вземи клона `client`, разбери които са промените в него след момента, в който този клон се е разклонил от `server` клона и ги приложи отново в него сякаш той е бил базиран първоначално на `master` клона.''
Изглежда доста объркано, но резултатът е впечатляващ.

.Пребазиране на topic клон от друг topic branch
image::images/interesting-rebase-2.png[Пребазиране на topic клон от друг topic branch.]

Сега можете да направите fast-forward на `master` клона (виж <<rbdiag_g>>):

[source,console]
----
$ git checkout master
$ git merge client
----

[[rbdiag_g]]
.Fast-forwarding на master клона за включване на промените от клона client
image::images/interesting-rebase-3.png[Fast-forwarding на master клона за включване на промените от клона client.]

Нека кажем, че решите да интегрирате и промените от server клона.
Можете да пребазирате server клона върху `master` без да се налага да превключвате към него изпълнявайки `git rebase [basebranch] [topicbranch]` – което вместо вас ще превключи към topicbranch (в този случай `server`) и ще го приложи върху basebranch (в случая `master`):

[source,console]
----
$ git rebase master server
----

Това прилага вашите `server` промени върху `master` клона както е показано в <<rbdiag_h>>.

[[rbdiag_h]]
.Пребазиране на server клона в master клона
image::images/interesting-rebase-4.png[Пребазиране на server клона в master клона.]

След което, можете да превъртите основния клон (`master`):

[source,console]
----
$ git checkout master
$ git merge server
----

Сега можете да изтриете клоновете `client` и `server`, защото те са интегрирани и не ви трябват повече, което ще направи историята на целия процес да изглежда така <<rbdiag_i>>:

[source,console]
----
$ git branch -d client
$ git branch -d server
----

[[rbdiag_i]]
.Историята на финалния къмит
image::images/interesting-rebase-5.png[Историята на финалния къмит.]

[[_rebase_peril]]
==== Опасности при пребазиране

(((rebasing, perils of)))
Както можете да се досетите, пребазирането си има и недостатъци, които могат да се обобщят в едно изречение:

*Не пребазирайте къмити, които съществуват извън вашето собствено хранилище.*

If you follow that guideline, you'll be fine.
If you don't, people will hate you, and you'll be scorned by friends and family.

When you rebase stuff, you're abandoning existing commits and creating new ones that are similar but different.
If you push commits somewhere and others pull them down and base work on them, and then you rewrite those commits with `git rebase` and push them up again, your collaborators will have to re-merge their work and things will get messy when you try to pull their work back into yours.

Let's look at an example of how rebasing work that you've made public can cause problems.
Suppose you clone from a central server and then do some work off that.
Your commit history looks like this:

.Clone a repository, and base some work on it
image::images/perils-of-rebasing-1.png["Clone a repository, and base some work on it."]

Now, someone else does more work that includes a merge, and pushes that work to the central server.
You fetch it and merge the new remote branch into your work, making your history look something like this:

.Fetch more commits, and merge them into your work
image::images/perils-of-rebasing-2.png["Fetch more commits, and merge them into your work."]

Next, the person who pushed the merged work decides to go back and rebase their work instead; they do a `git push --force` to overwrite the history on the server.
You then fetch from that server, bringing down the new commits.

[[_pre_merge_rebase_work]]
.Someone pushes rebased commits, abandoning commits you've based your work on
image::images/perils-of-rebasing-3.png["Someone pushes rebased commits, abandoning commits you've based your work on."]

Now you're both in a pickle.
If you do a `git pull`, you'll create a merge commit which includes both lines of history, and your repository will look like this:

[[_merge_rebase_work]]
.You merge in the same work again into a new merge commit
image::images/perils-of-rebasing-4.png[You merge in the same work again into a new merge commit.]

If you run a `git log` when your history looks like this, you'll see two commits that have the same author, date, and message, which will be confusing.
Furthermore, if you push this history back up to the server, you'll reintroduce all those rebased commits to the central server, which can further confuse people.
It's pretty safe to assume that the other developer doesn't want `C4` and `C6` to be in the history; that's why they rebased in the first place.

[[_rebase_rebase]]
==== Rebase When You Rebase

If you *do* find yourself in a situation like this, Git has some further magic that might help you out.
If someone on your team force pushes changes that overwrite work that you've based work on, your challenge is to figure out what is yours and what they've rewritten.

It turns out that in addition to the commit SHA-1 checksum, Git also calculates a checksum that is based just on the patch introduced with the commit.
This is called a ``patch-id''.

If you pull down work that was rewritten and rebase it on top of the new commits from your partner, Git can often successfully figure out what is uniquely yours and apply them back on top of the new branch.

For instance, in the previous scenario, if instead of doing a merge when we're at <<_pre_merge_rebase_work>> we run `git rebase teamone/master`, Git will:

* Determine what work is unique to our branch (C2, C3, C4, C6, C7)
* Determine which are not merge commits (C2, C3, C4)
* Determine which have not been rewritten into the target branch (just C2 and C3, since C4 is the same patch as C4')
* Apply those commits to the top of `teamone/master`

So instead of the result we see in <<_merge_rebase_work>>, we would end up with something more like <<_rebase_rebase_work>>.

[[_rebase_rebase_work]]
.Rebase on top of force-pushed rebase work.
image::images/perils-of-rebasing-5.png[Rebase on top of force-pushed rebase work.]

This only works if C4 and C4' that your partner made are almost exactly the same patch.
Otherwise the rebase won't be able to tell that it's a duplicate and will add another C4-like patch (which will probably fail to apply cleanly, since the changes would already be at least somewhat there).

You can also simplify this by running a `git pull --rebase` instead of a normal `git pull`.
Or you could do it manually with a `git fetch` followed by a `git rebase teamone/master` in this case.

If you are using `git pull` and want to make `--rebase` the default, you can set the `pull.rebase` config value with something like `git config --global pull.rebase true`.

If you treat rebasing as a way to clean up and work with commits before you push them, and if you only rebase commits that have never been available publicly, then you'll be fine.
If you rebase commits that have already been pushed publicly, and people may have based work on those commits, then you may be in for some frustrating trouble, and the scorn of your teammates.

If you or a partner does find it necessary at some point, make sure everyone knows to run `git pull --rebase` to try to make the pain after it happens a little bit simpler.

==== Rebase vs. Merge

(((rebasing, vs. merging)))(((merging, vs. rebasing)))
Now that you've seen rebasing and merging in action, you may be wondering which one is better.
Before we can answer this, let's step back a bit and talk about what history means.

One point of view on this is that your repository's commit history is a *record of what actually happened.*
It's a historical document, valuable in its own right, and shouldn't be tampered with.
From this angle, changing the commit history is almost blasphemous; you're _lying_ about what actually transpired.
So what if there was a messy series of merge commits?
That's how it happened, and the repository should preserve that for posterity.

The opposing point of view is that the commit history is the *story of how your project was made.*
You wouldn't publish the first draft of a book, and the manual for how to maintain your software deserves careful editing.
This is the camp that uses tools like rebase and filter-branch to tell the story in the way that's best for future readers.

Now, to the question of whether merging or rebasing is better: hopefully you'll see that it's not that simple.
Git is a powerful tool, and allows you to do many things to and with your history, but every team and every project is different.
Now that you know how both of these things work, it's up to you to decide which one is best for your particular situation.

In general the way to get the best of both worlds is to rebase local changes you've made but haven't shared yet before you push them in order to clean up your story, but never rebase anything you've pushed somewhere.
