[[_first_time]]
=== Първоначална настройка на Git

Сега, когато имате Git в системата си, е добре да направите няколко неща за да настроите Git обкръжението си.
Това се прави само веднъж на даден компютър и се съхранява между обновленията.
Можете също по всяко време да промените настройките изпълнявайки командите отново.


Git пристига с инструмент наречен `git config`, който позволява да извличате и променяте конфигурационните променливи, които контролират всички аспекти на това как изглежда и работи Git.(((git commands, config)))
Тези променливи може да се пазят в три различни места:

1. `/etc/gitconfig` файла: Съдържа стойности за всеки потребител в системата и всички техни хранилища с код.
  Ако изпълните командата `git config` с параметър `--system`, тя чете и пише в този файл.
2. `~/.gitconfig` или `~/.config/git/config` файл: Специфичен само за конкретния потребител.
  Git чете и пише в този файл ако горната команда е изпълнена с параметъра `--global`.
3. `config` файл в конкретна Git директория (`.git/config`) в произволно хранилище, което ползвате: Съдържа данни само за това конкретно хранилище.

Each level overrides values in the previous level, so values in `.git/config` trump those in `/etc/gitconfig`.
Всяко ниво от горните е с приоритет пред предишното, така че стойностите в `.git/config` се използват вместо аналогичните в `/etc/gitconfig`.

В Windows системите, Git търси файла `.gitconfig` в `$HOME` директорията (`C:\Users\$USER` в повечето случаи).
Git все пак търси за `/etc/gitconfig`, въпреки че тя е релативна към MSys главната директория, която се определя от това къде сте указали на инсталатора да инсталира Git.
Ако ползвате версия 2.x или по-нова на Git for Windows, съществува и конфигурационен файл на системно ниво, който се намира в `C:\Documents and Settings\All Users\Application Data\Git\config` при Windows XP, и в `C:\ProgramData\Git\config` при Windows Vista и по-новите.
Този конфигурационен файл може да се сменя само с командата `git config -f <file>` изпълнена от администраторски акаунт.

==== Вашата идентичност

Първото нещо, което трябва да направите след инсталацията е да зададете вашето потребителско име и имейл адрес.
Това е важно, защото всеки Git къмит използва тези данни и те ще са неделима част в следващите къмити:

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

Again, you need to do this only once if you pass the `--global` option, because then Git will always use that information for anything you do on that system.
If you want to override this with a different name or email address for specific projects, you can run the command without the `--global` option when you're in that project.

Many of the GUI tools will help you do this when you first run them.

==== Your Editor

Now that your identity is set up, you can configure the default text editor that will be used when Git needs you to type in a message.
If not configured, Git uses your system's default editor.

If you want to use a different text editor, such as Emacs, you can do the following:

[source,console]
----
$ git config --global core.editor emacs
----

While on a Windows system, if you want to use a different text editor, such as Notepad++, you can do the following:

On a x86 system
[source,console]
----
$ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -nosession"
----
On a x64 system
[source,console]
----
$ git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -nosession"
----

[NOTE]
====
Vim, Emacs and Notepad++ are popular text editors often used by developers on Unix based systems like Linux and OS X or a Windows system.
If you are not familiar with these editors, you may need to search for specific instructions for how to set up your favorite editor with Git.
====

[WARNING]
====
You may find, if you don't setup your editor like this, you get into a really confusing state when Git attempts to launch it.
An example on a Windows system may include a prematurely terminated Git operation during a Git initiated edit.
====

==== Checking Your Settings

If you want to check your settings, you can use the `git config --list` command to list all the settings Git can find at that point:

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

You may see keys more than once, because Git reads the same key from different files (`/etc/gitconfig` and `~/.gitconfig`, for example).
In this case, Git uses the last value for each unique key it sees.

You can also check what Git thinks a specific key's value is by typing `git config <key>`:(((git commands, config)))

[source,console]
----
$ git config user.name
John Doe
----
