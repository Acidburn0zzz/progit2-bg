[[_getting_a_repo]]
=== Създаване на Git хранилище

Можете да се сдобиете с Git хранилище (repository) по два основни начина.
Първият от тях взема съществуващ проект/директория и го импортира в Git.
Вторият клонира съществуващо Git хранилище от друг сървър.

==== Инициализиране на хранилище в налична директория

Ако започвате да следите съществуващ проект, трябва да отидете в директорията му. Ако никога не сте го правили, това изглежда различно според операционната система:

за Linux:
[source,console]
----
$ cd /home/user/your_repository
----
за Mac:
[source,console]
----
$ cd /Users/user/your_repository
----
за Windows:
[source,console]
----
$ cd /c/user/your_repository
----

и напишете:

[source,console]
----
$ git init
----

Това създава нова под-директория с име `.git`, която съдържа всичко необходимо, от което се нуждае Git - нещо като скелет на хранилището.
В този момент - нищо от вашите файлове не се следи все още.
(Вижте <<_git_internals>> за повече информация какви точно файлове се съдържат в тази новосъздадена директория.)(((git commands, init)))


Ако желаете да започнете контрол на версиите на съществуващи файлове (вместо на празна директория), вероятно ще искате да започнете да следите файловете и да направите първоначален къмит.
Можете да направите това с малко `git add` команди, които указват файловете, които искате да следите, последвани от `git commit`:

[source,console]
----
$ git add *.c
$ git add LICENSE
$ git commit -m 'initial project version'
----

Ще се върнем на тези команди след малко.
В този момент, вие разполагате с готово Git хранилище със следящи се файлове и сте ги публикували за пръв път.

[[_git_cloning]]
==== Клониране на съществуващо хранилище

Ако искате да изтеглите копие от съществуващо Git хранилище - например проект в който желаете да сътрудничите, командата, която ви трябва е `git clone`.
Ако сте запознати с други VCS като например Subversion, веднага ще забележите разликата - командата е "clone", а не "checkout".
Това е важна разлика - вместо да издърпва просто работещо копие, Git получава пълно копие на почти всички данни, които сървърът пази.
Всяка версия на всеки файл от историята на проекта се издърпва по подразбиране когато изпълните `git clone`.
Практически, ако сървърът се повреди, можете често да използвате почти всеки от клоновете на всеки клиент за да го възстановите в състоянието му към момента в който хранилището е било клонирани (може да загубите някои server-side специфични елементи, но цялата ви следяща се и значима информация ще е налична - вижте <<_git_on_the_server>> за повече подробности)


Хранилище се клонира с `git clone [url]`.(((git commands, clone)))
Например, ако искате да клонирате linkable библиотеката libgit2, можете да го направите така:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2
----

That creates a directory named ``libgit2'', initializes a `.git` directory inside it, pulls down all the data for that repository, and checks out a working copy of the latest version.
If you go into the new `libgit2` directory, you'll see the project files in there, ready to be worked on or used.
If you want to clone the repository into a directory named something other than ``libgit2'', you can specify that as the next command-line option:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2 mylibgit
----

That command does the same thing as the previous one, but the target directory is called `mylibgit`.

Git has a number of different transfer protocols you can use.
The previous example uses the `https://` protocol, but you may also see `git://` or `user@server:path/to/repo.git`, which uses the SSH transfer protocol.
<<_git_on_the_server>> will introduce all of the available options the server can set up to access your Git repository and the pros and cons of each.
